package rules.carl;
import com.mindsmiths.telegramAdapter.TelegramReceivedMessage;
import com.mindsmiths.ruleEngine.model.Initialize;
import com.mindsmiths.gpt3.completion.GPT3Completion;
import agents.Carl;


rule "First contact"
    salience 100
    when
        initialize: Initialize() from entry-point "agent-created"
        message: TelegramReceivedMessage() from entry-point "signals"
        agent: Carl(requestMode == false)
    then
        agent.initMessage();
        delete(message);
end

rule "Help message"
    salience 100
    when
        message: TelegramReceivedMessage(text.equalsIgnoreCase("$help")) from entry-point "signals"
        agent: Carl(requestMode == false)
    then
        agent.helpMessage();
        delete(message);
end

rule "Handle message"
    when
        message: TelegramReceivedMessage() from entry-point "signals"
        agent: Carl(requestMode == false)
    then
        modify(agent) {addMessageToMemory("Human", message.getText())};
        agent.askGPT3();
        delete(message);
end

rule "Send GPT3 response"
    when
        gpt3Result: GPT3Completion() from entry-point "signals"
        agent: Carl(requestMode == false)
    then
        String response = gpt3Result.getBestResponse();
        agent.sendMessage(response);
        modify(agent) {addMessageToMemory("Carl", response)};
        delete(gpt3Result);
end

//--------------------------------------------------------------------------------------------------------
//--------------------------------------------------------------------------------------------------------

rule "Intro new-request"
    salience 100
    when
        message: TelegramReceivedMessage(text.equalsIgnoreCase("$new-request")) from entry-point "signals"
        agent: Carl(requestMode == false)
    then
        agent.newRequestIntro();
        modify(agent) {setRequestMode(true)};
        delete(message);
end

rule "Handle new-request"
    salience 90
    when
        message: TelegramReceivedMessage() from entry-point "signals"
        agent: Carl(requestMode == true)
    then
        modify(agent) {setRequestMode(false)};
        agent.newRequest(message.getText());
        agent.sendMessage("(Request mode exited! You are now in Conversation mode!)");
        delete(message);
end


rule "Exit new-request"
    salience 100
    when
        message: TelegramReceivedMessage(text.equalsIgnoreCase("$exit")) from entry-point "signals"
        agent: Carl(requestMode == true)
    then
        modify(agent) {setRequestMode(false)};
        agent.sendMessage("(Request mode exited! You are now in Conversation mode!)");
        delete(message);
end